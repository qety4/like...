// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  username      String?       @unique
  image         String?
  bio           String        @default("")
  Account       Account[]
  Session       Session[]
  posts         Post[]
  comments      Comment[]
  postLikes     PostLike[]
  commentLikes  CommentLike[]
  followers     Follows[]     @relation("following")
  following     Follows[]     @relation("follower")
}

model Follows {
  user_follower  User   @relation("follower", fields: [followerId], references: [id])
  user_following User   @relation("following", fields: [followingId], references: [id])
  followerId     String
  followingId    String

  @@id([followerId, followingId])
}

model Post {
  id        String     @id @default(cuid())
  content   Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     PostLike[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentLike[]
  commentId String?
}

enum Like {
  LIKE
}

model PostLike {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  type   Like

  @@id([userId, postId])
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  type      Like

  @@id([userId, commentId])
}
